{"ast":null,"code":"import _slicedToArray from\"/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{Notifications}from\"@material-ui/icons\";import{Badge}from\"@material-ui/core\";import{realtime}from\"../shared/firebase\";import{useSelector}from\"react-redux\";import{jsx as _jsx}from\"react/jsx-runtime\";var NotiBadge=function NotiBadge(props){var _React$useState=React.useState(true),_React$useState2=_slicedToArray(_React$useState,2),is_read=_React$useState2[0],setIsRead=_React$useState2[1];var user_id=useSelector(function(state){return state.user.user.uid;});var notiCheck=function notiCheck(){var notiDB=realtime.ref(\"noti/\".concat(user_id));notiDB.update({read:true});props._onClick();};React.useEffect(function(){var notiDB=realtime.ref(\"noti/\".concat(user_id));console.log(user_id);notiDB.on(\"value\",function(snapshot){console.log(snapshot.val());setIsRead(snapshot.val().read);});return function(){return notiDB.off();};},[]);return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Badge,{invisible:is_read,color:\"secondary\",onClick:notiCheck,variant:\"dot\",children:/*#__PURE__*/_jsx(Notifications,{})})});};NotiBadge.defaultProps={_onClick:function _onClick(){}};export default NotiBadge;","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/components/NotiBadge.js"],"names":["React","Notifications","Badge","realtime","useSelector","NotiBadge","props","useState","is_read","setIsRead","user_id","state","user","uid","notiCheck","notiDB","ref","update","read","_onClick","useEffect","console","log","on","snapshot","val","off","defaultProps"],"mappings":"0KAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,aAAT,KAA8B,oBAA9B,CACA,OAASC,KAAT,KAAsB,mBAAtB,CACA,OAAQC,QAAR,KAAuB,oBAAvB,CACA,OAAQC,WAAR,KAA0B,aAA1B,C,2CAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAW,qBACEN,KAAK,CAACO,QAAN,CAAe,IAAf,CADF,oDACpBC,OADoB,qBACXC,SADW,qBAG3B,GAAMC,CAAAA,OAAO,CAAGN,WAAW,CAAC,SAAAO,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBC,GAApB,EAAN,CAA3B,CACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAMC,CAAAA,MAAM,CAAGZ,QAAQ,CAACa,GAAT,gBAAqBN,OAArB,EAAf,CACAK,MAAM,CAACE,MAAP,CAAc,CAACC,IAAI,CAAE,IAAP,CAAd,EACEZ,KAAK,CAACa,QAAN,GACH,CAJD,CAMAnB,KAAK,CAACoB,SAAN,CAAgB,UAAM,CACpB,GAAML,CAAAA,MAAM,CAAGZ,QAAQ,CAACa,GAAT,gBAAqBN,OAArB,EAAf,CACAW,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAEAK,MAAM,CAACQ,EAAP,CAAU,OAAV,CAAmB,SAACC,QAAD,CAAc,CAC7BH,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACC,GAAT,EAAZ,EAEAhB,SAAS,CAACe,QAAQ,CAACC,GAAT,GAAeP,IAAhB,CAAT,CACH,CAJD,EAMA,MAAO,kBAAMH,CAAAA,MAAM,CAACW,GAAP,EAAN,EAAP,CACD,CAXD,CAWG,EAXH,EAcA,mBACE,KAAC,KAAD,CAAO,QAAP,wBACE,KAAC,KAAD,EACE,SAAS,CAAElB,OADb,CAEE,KAAK,CAAC,WAFR,CAGE,OAAO,CAAEM,SAHX,CAIE,OAAO,CAAC,KAJV,uBAME,KAAC,aAAD,IANF,EADF,EADF,CAYD,CApCD,CAsCAT,SAAS,CAACsB,YAAV,CAAyB,CACvBR,QAAQ,CAAE,mBAAM,CAAE,CADK,CAAzB,CAIA,cAAed,CAAAA,SAAf","sourcesContent":["import React from \"react\";\n\nimport { Notifications } from \"@material-ui/icons\";\nimport { Badge } from \"@material-ui/core\";\nimport {realtime} from \"../shared/firebase\";\nimport {useSelector} from \"react-redux\";\n\n\nconst NotiBadge = (props) => {\n  const [is_read, setIsRead] = React.useState(true);\n\n  const user_id = useSelector(state => state.user.user.uid);\n  const notiCheck = () => {\n    const notiDB = realtime.ref(`noti/${user_id}`);\n    notiDB.update({read: true});\n      props._onClick();\n  };\n\n  React.useEffect(() => {\n    const notiDB = realtime.ref(`noti/${user_id}`);\n    console.log(user_id)\n\n    notiDB.on(\"value\", (snapshot) => {\n        console.log(snapshot.val());\n        \n        setIsRead(snapshot.val().read);\n    });\n\n    return () => notiDB.off();\n  }, []);\n\n\n  return (\n    <React.Fragment>\n      <Badge\n        invisible={is_read}\n        color=\"secondary\"\n        onClick={notiCheck}\n        variant=\"dot\"\n      >\n        <Notifications />\n      </Badge>\n    </React.Fragment>\n  );\n};\n\nNotiBadge.defaultProps = {\n  _onClick: () => {},\n};\n\nexport default NotiBadge;"]},"metadata":{},"sourceType":"module"}