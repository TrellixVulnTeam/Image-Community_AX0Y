{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url: \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    };\n    postDB.add({ ...user_info,\n      ..._post\n    }).then(doc => {\n      let post = {\n        user_info,\n        ..._post,\n        id: doc.id\n      };\n      dispatch(addPost(post));\n    }).catch(err => {\n      console.log(\"post 작성에 실패했습니다.\", err);\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['comment_cnt', 'contents',...] 배열로 만들어 줌 \n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; //리듀서\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firebase","firestore","moment","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","image_url","contents","comment_cnt","insert_dt","format","addPostFB","dispatch","getState","history","postDB","collection","_user","user","user_info","user_name","user_id","uid","user_profile","_post","add","then","doc","id","catch","err","console","log","getPostFB","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\"\nimport moment from \"moment\";\n\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({ post_list }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\n\nconst initialState = {\n  list: [],\n};\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url:\n    \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n  \n};\n\n\nconst addPostFB = (contents=\"\") => {\n  return function (dispatch, getState, {history}){\n\n    const postDB = firestore.collection(\"post\");\n\n    const _user = getState().user.user;\n\n    const user_info ={\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n\n    };\n\n\n\n    postDB.add({...user_info, ..._post}).then((doc)=>{\n      \n      let post = {user_info, ..._post, id:doc.id  };\n      dispatch(addPost(post));\n\n    }).catch((err) => {\n      console.log(\"post 작성에 실패했습니다.\", err);\n    });\n  }\n\n}\n\n\n\nconst getPostFB = () => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    postDB.get().then((docs) => {\n\n        let post_list =[];\n      docs.forEach((doc) => {\n\n        let _post = doc.data();  \n        // ['comment_cnt', 'contents',...] 배열로 만들어 줌 \n        let post = Object.keys(_post).reduce((acc, cur) => {\n            \n\n            if(cur.indexOf(\"user_\") !== -1) {\n                return {...acc, user_info: {...acc.user_info, [cur]: _post[cur]}};\n            }\n            return {...acc, [cur]: _post[cur]}\n        }, {id: doc.id, user_info: {}}\n        );\n        post_list.push(post);\n      });\n\n\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n};\n\n//리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n    }),\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\n     draft.list.unshift(action.payload.post);\n    }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}