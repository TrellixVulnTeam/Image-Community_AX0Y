{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/pages/Notification.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Text, Image } from \"../elements\";\nimport Card from \"../components/Card\";\nimport { realtime } from \"../shared/firebase\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notification = props => {\n  _s();\n\n  const [noti, setNoti] = React.useState([]);\n  const user = useSelector(state => state.user.user);\n  React.useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    const notiDB = realtime.ref(`noti/${user.uid}/list`); // firebase realtime database는 내림차순 정렬을 지원하지 않아요!\n    // 데이터를 가져온 후 직접 역순으로 내보내야 합니다!\n\n    const _noti = notiDB.orderByChild(\"insert_dt\");\n\n    _noti.once('value', snapshot => {\n      if (snapshot.exists()) {\n        let _data = snapshot.val(); // reserse()는 배열을 역순으로 뒤집어줘요.\n\n\n        let _noti_list = Object.keys(_data).reverse().map(s => {\n          return _data[s];\n        });\n\n        setNoti(_noti_list);\n      }\n    });\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      padding: \"16px\",\n      bg: \"#EFF6FF\",\n      children: noti.map((n, idx) => {\n        return /*#__PURE__*/_jsxDEV(Card, { ...n\n        }, `noti_${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notification, \"87TZnJZtVKR4pTnIMMXsXs2imX4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Notification;\nexport default Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/pages/Notification.js"],"names":["React","Grid","Text","Image","Card","realtime","useSelector","Notification","props","noti","setNoti","useState","user","state","useEffect","notiDB","ref","uid","_noti","orderByChild","once","snapshot","exists","_data","val","_noti_list","Object","keys","reverse","map","s","n","idx"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,KAApB,QAAgC,aAAhC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAU;AAAA;;AAE3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACW,QAAN,CAAe,EAAf,CAAxB;AAEA,QAAMC,IAAI,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,IAAN,CAAWA,IAArB,CAAxB;AAEAZ,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AAEpB,QAAG,CAACF,IAAJ,EAAS;AACP;AACD;;AAED,UAAMG,MAAM,GAAGV,QAAQ,CAACW,GAAT,CAAc,QAAOJ,IAAI,CAACK,GAAI,OAA9B,CAAf,CANoB,CAQpB;AACA;;AACA,UAAMC,KAAK,GAAGH,MAAM,CAACI,YAAP,CAAoB,WAApB,CAAd;;AAEAD,IAAAA,KAAK,CAACE,IAAN,CAAW,OAAX,EAAoBC,QAAQ,IAAI;AAE9B,UAAGA,QAAQ,CAACC,MAAT,EAAH,EAAqB;AACnB,YAAIC,KAAK,GAAGF,QAAQ,CAACG,GAAT,EAAZ,CADmB,CAGnB;;;AACA,YAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,GAA6BC,GAA7B,CAAiCC,CAAC,IAAI;AACrD,iBAAOP,KAAK,CAACO,CAAD,CAAZ;AACD,SAFgB,CAAjB;;AAIApB,QAAAA,OAAO,CAACe,UAAD,CAAP;AACD;AAEF,KAbD;AAcD,GA1BD,EA0BG,CAACb,IAAD,CA1BH;AA8BA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BACM,QAAC,IAAD;AAAM,MAAA,OAAO,EAAC,MAAd;AAAqB,MAAA,EAAE,EAAC,SAAxB;AAAA,gBACDH,IAAI,CAACoB,GAAL,CAAS,CAACE,CAAD,EAAIC,GAAJ,KAAY;AAClB,4BACI,QAAC,IAAD,OAA8BD;AAA9B,WAAY,QAAOC,GAAI,EAAvB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJA;AADC;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA/CD;;GAAMzB,Y;UAIWD,W;;;KAJXC,Y;AAmDN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport {Grid, Text, Image} from \"../elements\";\nimport Card from \"../components/Card\"\nimport {realtime} from \"../shared/firebase\";\nimport {useSelector} from \"react-redux\";\n\n\nconst Notification = (props) =>{\n\n    const [noti, setNoti] = React.useState([]);\n\n    const user = useSelector(state => state.user.user);\n\n    React.useEffect(() => {\n\n      if(!user){\n        return;\n      }\n\n      const notiDB = realtime.ref(`noti/${user.uid}/list`);\n      \n      // firebase realtime database는 내림차순 정렬을 지원하지 않아요!\n      // 데이터를 가져온 후 직접 역순으로 내보내야 합니다!\n      const _noti = notiDB.orderByChild(\"insert_dt\");\n      \n      _noti.once('value', snapshot => {\n        \n        if(snapshot.exists()){\n          let _data = snapshot.val();\n\n          // reserse()는 배열을 역순으로 뒤집어줘요.\n          let _noti_list = Object.keys(_data).reverse().map(s => {\n            return _data[s];\n          });\n\n          setNoti(_noti_list);\n        }\n        \n      })\n    }, [user]);\n\n\n    \n    return(\n        <React.Fragment>\n              <Grid padding=\"16px\" bg=\"#EFF6FF\">\n            {noti.map((n, idx) => {\n                return (\n                    <Card key={`noti_${idx}`} {...n}/>\n                )\n            })}\n        </Grid>\n        </React.Fragment>\n    )\n}\n\n\n\nexport default Notification;"]},"metadata":{},"sourceType":"module"}