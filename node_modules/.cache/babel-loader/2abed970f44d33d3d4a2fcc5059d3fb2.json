{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LODING = \"LOADING\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LODING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"mean0\",\n  //   user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  // },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id);\n\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n      _upload.then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n          console.log(url);\n          return url;\n        }).then(url => {\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            }));\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    };\n    const _image = getState().image.preview;\n    console.log(_image);\n    console.log(typeof _image);\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        return url;\n      }).then(url => {\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성에 실패했어요!\", err);\n        });\n      }).catch(err => {\n        window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // state에서 페이징 정보 가져오기\n    let _paging = getState().post.paging; // 시작정보가 기록되었는데 다음 가져올 데이터가 없다면? 앗, 리스트가 끝났겠네요!\n    // 그럼 아무것도 하지말고 return을 해야죠!\n\n    if (_paging.start && !_paging.next) {\n      return;\n    } // 가져오기 시작~!\n\n\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n    let query = postDB.orderBy(\"insert_dt\", \"desc\"); // 시작점 정보가 있으면? 시작점부터 가져오도록 쿼리 수정!\n\n    if (start) {\n      query = query.startAt(start);\n    } // 사이즈보다 1개 더 크게 가져옵시다. \n    // 3개씩 끊어서 보여준다고 할 때, 4개를 가져올 수 있으면? 앗 다음 페이지가 있겠네하고 알 수 있으니까요.\n    // 만약 4개 미만이라면? 다음 페이지는 없겠죠! :)\n\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = []; // 새롭게 페이징 정보를 만들어줘요.\n      // 시작점에는 새로 가져온 정보의 시작점을 넣고,\n      // next에는 마지막 항목을 넣습니다.\n      // (이 next가 다음번 리스트 호출 때 start 파라미터로 넘어올거예요.)\n\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size + 1 ? docs.docs[docs.docs.length - 1] : null,\n        size: size\n      };\n      docs.forEach(doc => {\n        let _post = doc.data();\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      }); // 마지막 하나는 빼줍니다.\n      // 그래야 size대로 리스트가 추가되니까요!\n      // 마지막 데이터는 다음 페이지의 유무를 알려주기 위한 친구일 뿐! 리스트에 들어가지 않아요!\n\n      post_list.pop();\n      dispatch(setPost(post_list, paging));\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(...action.payload.post_list);\n    draft.paging = action.payload.paging;\n    draft.is_loading = false;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LODING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","LODING","setPost","post_list","addPost","post","editPost","post_id","loading","is_loading","initialState","list","paging","start","next","size","initialPost","image_url","contents","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","window","alert","addPostFB","_user","user_info","user_name","user_profile","add","setPreview","getPostFB","_paging","query","orderBy","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","state","action","draft","payload","unshift","idx"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport { actionCreators as imageActions } from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LODING = \"LOADING\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({ post_list }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}));\nconst loading = createAction(LODING, (is_loading) => ({is_loading}));\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"mean0\",\n  //   user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  // },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) => {\n          dispatch(editPost(post_id, { ...post }));\n          history.replace(\"/\");\n        });\n\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      _upload.then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    const _user = getState().user.user;\n\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    };\n\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n    };\n\n    const _image = getState().image.preview;\n\n    console.log(_image);\n    console.log(typeof _image);\n\n    const _upload = storage\n      .ref(`images/${user_info.user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload.then((snapshot) => {\n      snapshot.ref\n        .getDownloadURL()\n        .then((url) => {\n          console.log(url);\n\n          return url;\n        })\n        .then((url) => {\n          postDB\n            .add({ ...user_info, ..._post, image_url: url })\n            .then((doc) => {\n              let post = { user_info, ..._post, id: doc.id, image_url: url };\n              dispatch(addPost(post));\n              history.replace(\"/\");\n\n              dispatch(imageActions.setPreview(null));\n            })\n            .catch((err) => {\n              window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n              console.log(\"post 작성에 실패했어요!\", err);\n            });\n        })\n        .catch((err) => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size=3) => {\n  return function (dispatch, getState, { history }) {\n\n    // state에서 페이징 정보 가져오기\n    let _paging = getState().post.paging;\n\n    // 시작정보가 기록되었는데 다음 가져올 데이터가 없다면? 앗, 리스트가 끝났겠네요!\n    // 그럼 아무것도 하지말고 return을 해야죠!\n    if (_paging.start && !_paging.next) {\n      return;\n    }\n    \n    // 가져오기 시작~!\n    dispatch(loading(true));\n    \n    const postDB = firestore.collection(\"post\");\n\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    // 시작점 정보가 있으면? 시작점부터 가져오도록 쿼리 수정!\n    if(start){\n      query = query.startAt(start);\n    }\n\n    // 사이즈보다 1개 더 크게 가져옵시다. \n    // 3개씩 끊어서 보여준다고 할 때, 4개를 가져올 수 있으면? 앗 다음 페이지가 있겠네하고 알 수 있으니까요.\n    // 만약 4개 미만이라면? 다음 페이지는 없겠죠! :)\n    query.limit(size+1).get().then((docs) => {\n      let post_list = [];\n\n      // 새롭게 페이징 정보를 만들어줘요.\n      // 시작점에는 새로 가져온 정보의 시작점을 넣고,\n      // next에는 마지막 항목을 넣습니다.\n      // (이 next가 다음번 리스트 호출 때 start 파라미터로 넘어올거예요.)\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size+1? docs.docs[docs.docs.length - 1] : null,\n        size: size,\n      };\n\n      docs.forEach((doc) => {\n        let _post = doc.data();\n\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n\n        post_list.push(post);\n      });\n\n      // 마지막 하나는 빼줍니다.\n      // 그래야 size대로 리스트가 추가되니까요!\n      // 마지막 데이터는 다음 페이지의 유무를 알려주기 위한 친구일 뿐! 리스트에 들어가지 않아요!\n      post_list.pop();\n\n      dispatch(setPost(post_list, paging));\n    });\n  };\n};\n\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(...action.payload.post_list);\n        draft.paging = action.payload.paging;\n        draft.is_loading = false;\n      }),\n\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.post);\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n      }),\n      [LODING]: (state, action) => produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}