{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { storage } from \"../../shared/firebase\"; // actions\n\nconst UPLOADING = \"UPLOADING\";\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst SET_PREVIEW = \"SET_PREVIEW\"; // action creators\n\nconst uploading = createAction(UPLOADING, uploading => ({\n  uploading\n}));\nconst uploadImage = createAction(UPLOAD_IMAGE, image_url => ({\n  image_url\n}));\n\nfunction uploadImageFB(image) {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(uploading(true));\n    console.log(`images/${new Date().getTime()}_${image.name}`);\n\n    const _upload = storage.ref(`images/${image.name}`).put(image); //   업로드!\n\n\n    _upload.then(snapshot => {\n      console.log(snapshot); // 업로드한 파일의 다운로드 경로를 가져오자!\n\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        dispatch(uploadImage(url));\n      });\n    }).catch(err => {\n      dispatch(uploading(false));\n    });\n  };\n} // initial state\n\n\nconst initialState = {\n  image_url: \"http://via.placeholder.com/400x300\",\n  uploading: false\n}; // reducer\n\nexport default handleActions({\n  [UPLOAD_IMAGE]: (state, action) => produce(state, draft => {\n    draft.image_url = action.payload.image_url;\n    draft.uploading = false;\n  }),\n  [UPLOADING]: (state, action) => produce(state, draft => {\n    draft.uploading = action.payload.uploading;\n  })\n}, initialState);\nconst actionCreators = {\n  uploadImage,\n  uploadImageFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/image.js"],"names":["createAction","handleActions","produce","storage","UPLOADING","UPLOAD_IMAGE","SET_PREVIEW","uploading","uploadImage","image_url","uploadImageFB","image","dispatch","getState","history","console","log","Date","getTime","name","_upload","ref","put","then","snapshot","getDownloadURL","url","catch","err","initialState","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,SAASC,OAAT,QAAwB,uBAAxB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,aAApB,C,CAGA;;AACA,MAAMC,SAAS,GAAGP,YAAY,CAACI,SAAD,EAAaG,SAAD,KAAgB;AAAEA,EAAAA;AAAF,CAAhB,CAAZ,CAA9B;AACA,MAAMC,WAAW,GAAGR,YAAY,CAACK,YAAD,EAAgBI,SAAD,KAAgB;AAAEA,EAAAA;AAAF,CAAhB,CAAf,CAAhC;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAE9CF,IAAAA,QAAQ,CAACL,SAAS,CAAC,IAAD,CAAV,CAAR;AAEAQ,IAAAA,OAAO,CAACC,GAAR,CAAa,UAAS,IAAIC,IAAJ,GAAWC,OAAX,EAAqB,IAAGP,KAAK,CAACQ,IAAK,EAAzD;;AACA,UAAMC,OAAO,GAAGjB,OAAO,CAACkB,GAAR,CAAa,UAASV,KAAK,CAACQ,IAAK,EAAjC,EAAoCG,GAApC,CAAwCX,KAAxC,CAAhB,CAL8C,CAO9C;;;AACAS,IAAAA,OAAO,CAACG,IAAR,CAAcC,QAAD,IAAc;AACzBT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ,EADyB,CAGzB;;AACAA,MAAAA,QAAQ,CAACH,GAAT,CAAaI,cAAb,GAA8BF,IAA9B,CAAoCG,GAAD,IAAS;AAC1CX,QAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACAd,QAAAA,QAAQ,CAACJ,WAAW,CAACkB,GAAD,CAAZ,CAAR;AACD,OAHD;AAID,KARD,EAQGC,KARH,CAQSC,GAAG,IAAI;AACZhB,MAAAA,QAAQ,CAACL,SAAS,CAAC,KAAD,CAAV,CAAR;AACH,KAVD;AAWD,GAnBD;AAoBD,C,CAED;;;AACA,MAAMsB,YAAY,GAAG;AACnBpB,EAAAA,SAAS,EAAE,oCADQ;AAEnBF,EAAAA,SAAS,EAAE;AAFQ,CAArB,C,CAKA;;AACA,eAAeN,aAAa,CAC1B;AACE,GAACI,YAAD,GAAgB,CAACyB,KAAD,EAAQC,MAAR,KACd7B,OAAO,CAAC4B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACvB,SAAN,GAAkBsB,MAAM,CAACE,OAAP,CAAexB,SAAjC;AACAuB,IAAAA,KAAK,CAACzB,SAAN,GAAkB,KAAlB;AACD,GAHM,CAFX;AAOE,GAACH,SAAD,GAAa,CAAC0B,KAAD,EAAQC,MAAR,KACX7B,OAAO,CAAC4B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACzB,SAAN,GAAkBwB,MAAM,CAACE,OAAP,CAAe1B,SAAjC;AACD,GAFM;AARX,CAD0B,EAa1BsB,YAb0B,CAA5B;AAgBA,MAAMK,cAAc,GAAG;AACrB1B,EAAAA,WADqB;AAErBE,EAAAA;AAFqB,CAAvB;AAKA,SAASwB,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\n\nimport { storage } from \"../../shared/firebase\";\n\n// actions\nconst UPLOADING = \"UPLOADING\";\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst SET_PREVIEW = \"SET_PREVIEW\";\n\n\n// action creators\nconst uploading = createAction(UPLOADING, (uploading) => ({ uploading }));\nconst uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({ image_url }));\n\n\nfunction uploadImageFB(image) {\n  return function (dispatch, getState, {history}) {\n    \n    dispatch(uploading(true));\n    \n    console.log(`images/${new Date().getTime()}_${image.name}`);\n    const _upload = storage.ref(`images/${image.name}`).put(image);\n\n    //   업로드!\n    _upload.then((snapshot) => {\n      console.log(snapshot);\n\n      // 업로드한 파일의 다운로드 경로를 가져오자!\n      snapshot.ref.getDownloadURL().then((url) => {\n        console.log(url);\n        dispatch(uploadImage(url));\n      });\n    }).catch(err => {\n        dispatch(uploading(false));\n    });\n  };\n}\n\n// initial state\nconst initialState = {\n  image_url: \"http://via.placeholder.com/400x300\",\n  uploading: false,\n};\n\n// reducer\nexport default handleActions(\n  {\n    [UPLOAD_IMAGE]: (state, action) =>\n      produce(state, (draft) => {\n        draft.image_url = action.payload.image_url;\n        draft.uploading = false;\n      }),\n\n    [UPLOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.uploading = action.payload.uploading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  uploadImage,\n  uploadImageFB,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}