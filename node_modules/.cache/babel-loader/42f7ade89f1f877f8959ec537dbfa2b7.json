{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url: \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id);\n\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n      _upload.then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n          console.log(url);\n          return url;\n        }).then(url => {\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            }));\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    };\n    const _image = getState().image.preview;\n    console.log(_image);\n    const user_id = getState().user.user.uid;\n\n    const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        return url;\n      }).then(url => {\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"포스트 작성에 문제가 있어요! \");\n          console.log(\"post 작성에 실패했습니다.\", err);\n        });\n      }).catch(err => {\n        window.alert(\"이미지 업로드에 문제가 있어요! \");\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    if (start) {\n      query.startAt(start);\n    }\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = [];\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size + 1 ? docs.docs[docs.docs.length - 1] : null,\n        size: size\n      };\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['comment_cnt', 'contents',...] 배열로 만들어 줌\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      post_list.pop();\n      dispatch(setPost(post_list, paging));\n    });\n    return;\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['comment_cnt', 'contents',...] 배열로 만들어 줌\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; //리듀서\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firebase","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","LOADING","setPost","post_list","addPost","post","editPost","post_id","loading","is_loading","initialState","list","paging","start","next","size","initialPost","image_url","contents","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","window","alert","addPostFB","_user","user_info","user_name","user_profile","add","setPreview","getPostFB","query","orderBy","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","state","action","draft","payload","unshift","idx"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport { actionCreators as imageActions } from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({ post_list }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}));\nconst loading = createAction(LOADING, (is_loading)=>({is_loading}));\n\n\nconst initialState = {\n  list: [],\n  paging: {start: null, next:null, size: 3 },\n  is_loading: false,\n};\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url:\n    \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) => {\n          dispatch(editPost(post_id, { ...post }));\n          history.replace(\"/\");\n        });\n\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      _upload.then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    const _user = getState().user.user;\n\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    };\n\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n    };\n\n    const _image = getState().image.preview;\n    console.log(_image);\n\n    const user_id = getState().user.user.uid;\n    const _upload = storage\n      .ref(`images/${user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload.then((snapshot) => {\n      snapshot.ref\n        .getDownloadURL()\n        .then((url) => {\n          console.log(url);\n\n          return url;\n        })\n        .then((url) => {\n          postDB\n            .add({ ...user_info, ..._post, image_url: url })\n            .then((doc) => {\n              let post = { user_info, ..._post, id: doc.id, image_url: url };\n              dispatch(addPost(post));\n              history.replace(\"/\");\n\n              dispatch(imageActions.setPreview(null));\n            })\n            .catch((err) => {\n              window.alert(\"포스트 작성에 문제가 있어요! \");\n              console.log(\"post 작성에 실패했습니다.\", err);\n            });\n        })\n        .catch((err) => {\n          window.alert(\"이미지 업로드에 문제가 있어요! \");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, { history }) {\n    \n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n\n    if(start){\n      query.startAt(start);\n    }\n\n\n    query.limit(size +1).get().then(docs => {\n      let post_list = [];\n\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size +1? docs.docs[docs.docs.length -1]: null,\n        size: size,\n      }\n      docs.forEach((doc) => {\n        let _post = doc.data();\n        // ['comment_cnt', 'contents',...] 배열로 만들어 줌\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n        post_list.push(post);\n      });\n\n      post_list.pop();\n\n   \n      dispatch(setPost(post_list, paging));\n    })\n\n    return;\n\n    postDB.get().then((docs) => {\n      let post_list = [];\n      docs.forEach((doc) => {\n        let _post = doc.data();\n        // ['comment_cnt', 'contents',...] 배열로 만들어 줌\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n        post_list.push(post);\n      });\n\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n};\n\n//리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.post);\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n      }),\n      [LOADING]: (state, action) => produce(state, (draft) => {\n        draft.is_loading =action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}