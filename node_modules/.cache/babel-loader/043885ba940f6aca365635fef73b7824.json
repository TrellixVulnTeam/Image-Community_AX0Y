{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, realtime } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\";\nimport { actionCreators as postActions } from \"./post\";\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const post = getState().post.list.find(l => l.id === post_id);\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    };\n    commentDB.add(comment).then(doc => {\n      const postDB = firestore.collection(\"post\"); // increment 카운트수를 하나만큼 증가시켜 준다. \n\n      const increment = firebase.firestore.FieldValue.increment(1);\n      comment = { ...comment,\n        id: doc.id\n      };\n      postDB.doc(post_id).update({\n        comment_cnt: increment\n      }).then(_post => {\n        dispatch(addComment(post_id, comment));\n\n        if (post) {\n          dispatch(postActions.editPost(post_id, {\n            commen_cnt: parseInt(post.comment_cnt) + 1\n          })); //parseInt 숫자형으로 형 변환\n\n          const _noti_item = realtime.ref(`noti/${post.user_info.user_id}/list`).push();\n\n          _noti_item.set({\n            post_id: post.id,\n            user_name: comment.user_name,\n            imge_url: post.image_url,\n            insert_dt: comment.insert_dt\n          }, err => {\n            if (err) {\n              console.log(\"알림 저장에 실패 했어요!\");\n            } else {\n              const notiDB = realtime.ref(`noti/${post.user_info.user_id}`);\n              notiDB.update({\n                read: false\n              });\n            }\n          });\n        }\n      });\n    });\n  };\n};\n\nconst getCommentFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log('댓글 정보를 가져올 수가 없네요!', err);\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].unshift(action.payload.comment);\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n  addCommentFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","realtime","moment","firebase","actionCreators","postActions","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","addCommentFB","contents","dispatch","getState","history","post","find","l","id","commentDB","collection","user_info","user","user_id","uid","user_name","user_profile","insert_dt","format","add","then","doc","postDB","increment","FieldValue","update","comment_cnt","_post","editPost","commen_cnt","parseInt","_noti_item","ref","push","set","imge_url","image_url","err","console","log","notiDB","read","getCommentFB","where","orderBy","get","docs","forEach","data","catch","state","action","draft","payload","unshift"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, realtime } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\"\n\nimport {actionCreators as postActions } from \"./post\"\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({post_id, comment_list}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({post_id, comment}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function(dispatch, getState, {history}){\n\n\n    const post = getState().post.list.find(l => l.id ===post_id);\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n\n    let comment ={\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    }\n    commentDB.add(comment).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n      // increment 카운트수를 하나만큼 증가시켜 준다. \n      const increment = firebase.firestore.FieldValue.increment(1);\n\n\n      comment ={...comment, id: doc.id}\n      postDB\n      .doc(post_id)\n      .update({comment_cnt: increment})\n      .then((_post) =>{\n        dispatch(addComment(post_id, comment));\n\n        if(post){\n          dispatch(postActions.editPost(post_id, {commen_cnt: parseInt(post.comment_cnt)+1,\n          })\n          );  //parseInt 숫자형으로 형 변환\n\n          const _noti_item = realtime.ref(`noti/${post.user_info.user_id}/list`).push();\n          _noti_item.set({\n            post_id: post.id,\n            user_name: comment.user_name,\n            imge_url: post.image_url,\n            insert_dt: comment.insert_dt,\n          }, (err) =>{\n            if(err){\n              console.log(\"알림 저장에 실패 했어요!\")\n            }else{\n              const notiDB = realtime.ref(`noti/${post.user_info.user_id}`);\n              notiDB.update({read:false});\n            }\n        })\n        }\n\n        \n      }) \n    })\n  }\n}\n\nconst getCommentFB = (post_id) => {\n    return function(dispatch, getState, {history}){\n    if(!post_id){\n      return\n    }\n    const commentDB = firestore.collection(\"comment\");\n    commentDB\n    .where(\"post_id\", \"==\", post_id)\n    .orderBy(\"insert_dt\", \"desc\")\n    .get()\n    .then((docs) => {\n      let list =[];\n\n      docs.forEach((doc) =>{\n        list.push({...doc.data(), id: doc.id})\n      })\n      dispatch(setComment(post_id, list));\n    }).catch(err =>{\n      console.log('댓글 정보를 가져올 수가 없네요!', err);\n    });\n\n    }\n}\n\n\nexport default handleActions(\n  {\n      [SET_COMMENT]: (state, action) => produce(state, (draft) => {\n        draft.list[action.payload.post_id] = action.payload.comment_list;\n      }),\n      [ADD_COMMENT]: (state, action) => produce(state, (draft)=> {\n        draft.list[action.payload.post_id].unshift(action.payload.comment);\n\n      }),\n      [LOADING]: (state, action) => \n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n  addCommentFB,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}