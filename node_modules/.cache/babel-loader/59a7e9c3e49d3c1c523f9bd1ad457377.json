{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url: \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n};\n\nconst edtPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {};\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    };\n    const _image = getState().image.preview;\n    console.log(_image);\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        return url;\n      }).then(url => {\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"포스트 작성에 문제가 있어요! \");\n          console.log(\"post 작성에 실패했습니다.\", err);\n        });\n      }).catch(err => {\n        window.alert(\"이미지 업로드에 문제가 있어요! \");\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      });\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['comment_cnt', 'contents',...] 배열로 만들어 줌 \n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; //리듀서\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firebase","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","setPost","post_list","addPost","post","editPost","post_id","initialState","list","initialPost","image_url","contents","comment_cnt","insert_dt","format","edtPostFB","dispatch","getState","history","addPostFB","postDB","collection","_user","user","user_info","user_name","user_id","uid","user_profile","_post","_image","image","preview","console","log","_upload","ref","Date","getTime","putString","then","snapshot","getDownloadURL","url","add","doc","id","replace","setPreview","catch","err","window","alert","getPostFB","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift","idx","findIndex","p"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport firebase from \"../../shared/firebase\";\nimport \"firebase/firestore\";\nimport { firestore, storage} from \"../../shared/firebase\";\nimport \"moment\"\nimport moment from \"moment\";\n\nimport {actionCreators as imageActions} from \"./image\";\n\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\"\n\nconst setPost = createAction(SET_POST, (post_list) => ({ post_list }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) =>({post_id, post}))\n\n\nconst initialState = {\n  list: [],\n};\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"joy\",\n  //   user_profile:\n  //     \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  // },\n  image_url:\n    \"ttps://www.vmcdn.ca/f/files/piquenewsmagazine/import/2015-33_news_mtnnews2-1-cd1c0a5e13e77f75.jpg;w=640\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n  \n};\n\nconst edtPostFB = (post_id = null, post = {}) =>{\n  return function (dispatch, getState, {history}){\n\n  }\n}\n\nconst addPostFB = (contents=\"\") => {\n  return function (dispatch, getState, {history}){\n\n    const postDB = firestore.collection(\"post\");\n\n    const _user = getState().user.user;\n\n    const user_info ={\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\"),\n\n    };\n\n    const _image = getState().image.preview;\n    console.log(_image);\n\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        \n        return url;\n      }).then(url => {\n        postDB.add({...user_info, ..._post, image_url: url }).then((doc)=>{\n      \n          let post = {user_info, ..._post, id:doc.id, image_url: url  };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n\n          dispatch(imageActions.setPreview(null));\n    \n        }).catch((err) => {\n          window.alert(\"포스트 작성에 문제가 있어요! \")\n          console.log(\"post 작성에 실패했습니다.\", err);\n        });\n      }).catch((err) =>{\n        window.alert(\"이미지 업로드에 문제가 있어요! \")\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      })\n    }) \n      \n  }\n\n}\n\n\n\nconst getPostFB = () => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    postDB.get().then((docs) => {\n\n        let post_list =[];\n      docs.forEach((doc) => {\n\n        let _post = doc.data();  \n        // ['comment_cnt', 'contents',...] 배열로 만들어 줌 \n        let post = Object.keys(_post).reduce((acc, cur) => {\n            \n\n            if(cur.indexOf(\"user_\") !== -1) {\n                return {...acc, user_info: {...acc.user_info, [cur]: _post[cur]}};\n            }\n            return {...acc, [cur]: _post[cur]}\n        }, {id: doc.id, user_info: {}}\n        );\n        post_list.push(post);\n      });\n\n\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n};\n\n//리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n    }),\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\n     draft.list.unshift(action.payload.post);\n    }),\n    [EDIT_POST]: (state, action) => produce(state, (draft) => {\n      let idx = draft.list.findIndex((p) => p.id === action.payload.post_id)\n      draft.list[idx] = {...draft.list[idx], ...action.payload.post}\n     }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}