{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst getCommentFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {}),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","getCommentFB","dispatch","getState","history","commentDB","collection","where","orderBy","get","then","docs","forEach","doc","push","data","id","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,UAAU,GAAGR,YAAY,CAACK,WAAD,EAAc,CAACI,OAAD,EAAUC,YAAV,MAA4B;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAA5B,CAAd,CAA/B;AACA,MAAMC,UAAU,GAAGX,YAAY,CAACM,WAAD,EAAc,CAACG,OAAD,EAAUG,OAAV,MAAuB;AAACH,EAAAA,OAAD;AAAUG,EAAAA;AAAV,CAAvB,CAAd,CAA/B;AAEA,MAAMC,OAAO,GAAGb,YAAY,CAACO,OAAD,EAAWO,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBF,EAAAA,UAAU,EAAE;AAFO,CAArB;;AAKA,MAAMG,YAAY,GAAIR,OAAD,IAAa;AAC9B,SAAO,UAASS,QAAT,EAAmBC,QAAnB,EAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAuC;AAC9C,QAAG,CAACX,OAAJ,EAAY;AACV;AACD;;AACD,UAAMY,SAAS,GAAGlB,SAAS,CAACmB,UAAV,CAAqB,SAArB,CAAlB;AACAD,IAAAA,SAAS,CACRE,KADD,CACO,SADP,EACkB,IADlB,EACwBd,OADxB,EAECe,OAFD,CAES,WAFT,EAEsB,MAFtB,EAGCC,GAHD,GAICC,IAJD,CAIOC,IAAD,IAAU;AACd,UAAIX,IAAI,GAAE,EAAV;AAEAW,MAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAQ;AACnBb,QAAAA,IAAI,CAACc,IAAL,CAAU,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAgBC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAAxB,SAAV;AACD,OAFD;AAGAd,MAAAA,QAAQ,CAACV,UAAU,CAACC,OAAD,EAAUO,IAAV,CAAX,CAAR;AACD,KAXD;AAaC,GAlBD;AAmBH,CApBD;;AAuBA,eAAef,aAAa,CAC1B;AACI,GAACI,WAAD,GAAe,CAAC4B,KAAD,EAAQC,MAAR,KAAmBhC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAW,CAE3D,CAFwC,CAD7C;AAII,GAAC7B,WAAD,GAAe,CAAC2B,KAAD,EAAQC,MAAR,KAAmBhC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAU,CAE1D,CAFwC,CAJ7C;AAOI,GAAC5B,OAAD,GAAW,CAAC0B,KAAD,EAAQC,MAAR,KACXhC,OAAO,CAAC+B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACrB,UAAN,GAAmBoB,MAAM,CAACE,OAAP,CAAetB,UAAlC;AACD,GAFM;AARX,CAD0B,EAa1BC,YAb0B,CAA5B;AAgBA,MAAMsB,cAAc,GAAG;AACrBpB,EAAAA,YADqB;AAErBT,EAAAA,UAFqB;AAGrBG,EAAAA;AAHqB,CAAvB;AAMA,SAAS0B,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({post_id, comment_list}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({post_id, comment}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n};\n\nconst getCommentFB = (post_id) => {\n    return function(dispatch, getState, {history}){\n    if(!post_id){\n      return\n    }\n    const commentDB = firestore.collection(\"comment\");\n    commentDB\n    .where(\"post_id\", \"==\", post_id)\n    .orderBy(\"insert_dt\", \"desc\")\n    .get()\n    .then((docs) => {\n      let list =[];\n\n      docs.forEach((doc) =>{\n        list.push({...doc.data(), id: doc.id})\n      })\n      dispatch(setComment(post_id, list));\n    });\n\n    }\n}\n\n\nexport default handleActions(\n  {\n      [SET_COMMENT]: (state, action) => produce(state, (draft) => {\n\n      }),\n      [ADD_COMMENT]: (state, action) => produce(state, (draft)=> {\n\n      }),\n      [LOADING]: (state, action) => \n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}