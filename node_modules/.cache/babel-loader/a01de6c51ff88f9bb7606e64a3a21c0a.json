{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    };\n  };\n};\n\nconst getCommentFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log('댓글 정보를 가져올 수가 없네요!', err);\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jeongeunchoi/REACT_MIDDLEAGE/image-community/src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","addCommentFB","contents","dispatch","getState","history","commentDB","collection","user_info","user","user_id","uid","user_name","user_profile","insert_dt","format","getCommentFB","where","orderBy","get","then","docs","forEach","doc","push","data","id","catch","err","console","log","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({post_id, comment_list}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({post_id, comment}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function(dispatch, getState, {history}){\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n\n    let comment ={\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYY-MM-DD hh:mm:ss\")\n    }\n\n  }\n}\n\nconst getCommentFB = (post_id) => {\n    return function(dispatch, getState, {history}){\n    if(!post_id){\n      return\n    }\n    const commentDB = firestore.collection(\"comment\");\n    commentDB\n    .where(\"post_id\", \"==\", post_id)\n    .orderBy(\"insert_dt\", \"desc\")\n    .get()\n    .then((docs) => {\n      let list =[];\n\n      docs.forEach((doc) =>{\n        list.push({...doc.data(), id: doc.id})\n      })\n      dispatch(setComment(post_id, list));\n    }).catch(err =>{\n      console.log('댓글 정보를 가져올 수가 없네요!', err);\n    });\n\n    }\n}\n\n\nexport default handleActions(\n  {\n      [SET_COMMENT]: (state, action) => produce(state, (draft) => {\n        draft.list[action.payload.post_id] = action.payload.comment_list;\n      }),\n      [ADD_COMMENT]: (state, action) => produce(state, (draft)=> {\n\n      }),\n      [LOADING]: (state, action) => \n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n};\n\nexport { actionCreators };"]},"metadata":{},"sourceType":"module"}